#ifndef DEV_DDM
#define DEV_DDM

#include <fftw3.h>

#ifdef __AVX2__
#include <immintrin.h>
#endif

#ifdef __AVX512F__
#include <immintrin.h>
#endif

#include "stack.hpp"
#include "utils.hpp"

class DDM {
public:
    /**
     * Comment generated by GPT-3
     *
	 * Construct a DDM (Differential Dynamic Microscopy) object using a Stack and specified
	 * options.
     *
	 * This constructor initializes a DDM object based on the provided Stack, Delays, and
	 * options. It performs the following steps:
	 *   1. Initializes FFTW (Fastest Fourier Transform in the West) threads and sets the
	 *      number of threads.
	 *   2. Creates an FFTW plan for the given Stack, performing a real-to-complex discrete
	 *      Fourier transform (DFT).
	 *   3. Computes DDM differences using the FFT results. The actual DDM algorithm depends
     *      on the implementation of the compute_DDM method in child classes.
	 *   4. Shifts the DDM images to center the zero frequency, resulting in a square DDM
	 *      buffer.
     *
     * @param stack A reference to the Stack object containing input data.
	 * @param options Reference to the Options structure specifying parameters for DDM
	 *        computation.
     *
     * Details:
     *   - Uses FFTW for efficient Fourier transforms.
     *   - The DDM buffer dimensions depend on the options and input Stack dimensions.
	 *   - The DDM differences are computed based on options, considering log scale and
	 *     vectorization.
     *   - The final DDM buffer is shifted to center the zero frequency.
     */
    DDM(Stack &stack, utils::Options& options);
    ~DDM();

     /**
     * Comment generated by GPT-3
     *
     * Save the computed Differential Dynamic Microscopy (DDM) data to file.
     *
     * This function writes the DDM data to a file using the TinyTIFFWriter library.
     * It performs the following steps:
     *   1. Initializes a timer to measure the duration of the file-writing process.
     *   2. Opens a TinyTIFFWriter file with the specified output path, data type, dimensions, and format.
     *   3. Iterates through each frame of the DDM buffer and writes the data to the TinyTIFFWriter file.
     *   4. Closes the TinyTIFFWriter file after writing all frames.
     *
     */
    void save();

    const auto& get_ddm_buffer() const {
        return ddm_buffer;
    }
    const auto& get_lag_times() const {
        return lag_times;
    }

    const int raw_ddm_width, raw_ddm_height, raw_ddm_size;
    const int ddm_width, ddm_height, ddm_size;
    const int Nt, n_lags, max_lag_shift;

protected:
    void compute_lags();
    /**
     * Compute the Fast Fourier Transform (FFT) of the image stack.
     */
    void compute_FFT();
     /**
     * Compute the image structure function of DDM. Implemented in child classes.
     */
    virtual void compute_DDM() = 0;

    
    /**
     * Comment generated by GPT-3
     *
     * Perform a shift operation on the raw DDM images.
     *
	 * The "raw DDM images" exhibit symmetries due to the Fourier transform, resulting in 
     * "fft lobes" in the corners of the image. The width of the raw DDM is half the width
     * of the real input signal plus 1, while the height remains the same.
     *
	 * The goal of this function is to transform the raw DDM into a square image with the
	 * zero frequency centered. To achieve this, the function operates on a buffer of odd
	 * width and height, referred to as DDM buffer.
     *
	 * The shift operation involves copying and mirroring regions of the raw DDM buffer to
	 * construct the final DDM buffer.
     *
     *                ┌───┐    ┌────────┐
     *                │ 1 │ -> │ 1'   2'│
     *                │ 4 │ -> │ 4'   3'│
     *                └───┘    └────────┘
     *                beg buf   final buf
     * Operations:
     *   - Copy Region 1 to Region 3'
     *   - Copy Region 4 to Region 2'
     *   - Mirror Region 3' to Region 1' and Region 2' to Region 4'
     *
     * Note : final dimension is odd.
     */
    void ddm_shift();    

    utils::Options options;
    Stack& stack;

    std::vector<double> lag_times;
    std::vector<int> lag_shifts;

    fftwf_complex *stack_fft;
    float* raw_ddm_buffer;
    float* ddm_buffer;
};
#endif //DEV_DDM
